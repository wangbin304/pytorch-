

import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
import torch as t
import torch.optim as optim


class Net(nn.Module):
    def __init__(self):
        # nn.Module.__init__(self)
        super(Net, self).__init__()
        # print("hello world!\n")

        self.conv1 = nn.Conv2d(1, 6, 5)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
        # print("first_pool:",x.grad_fn)
        x = F.max_pool2d(F.relu(self.conv2(x)), 2)
        # print("second_pool:",x.grad_fn)
        # reshape  -1   表示自适应
        x = x.view(x.size()[0], -1)
        # print("f_c0:",x.grad_fn)
        x = F.relu(self.fc1(x))
        # print("f_c1:", x.grad_fn)
        x = F.relu(self.fc2(x))
        # print("f_c2:",x.grad_fn)
        x = self.fc3(x)
        # print("f_c3:",x.grad_fn)
        return x

net = Net()
# print(net)
optimizer=optim.SGD(net.parameters(),lr=0.01)
optimizer.zero_grad()
input=Variable(t.randn(1,1,32,32))
output=net(input)
target=Variable(t.arange(0,10))
criterion=nn.MSELoss()
output=output.to(t.float32)
target=target.to(t.float32)
# output=t.float32(output)
# target=t.float32(target)
loss=criterion(output,target)
loss.backward()
optimizer.step()
