RNN和RNNCell层的区别在于前者能够处理整个序列，而后者一次只能处理序列中一个时间点的数据，
前者封装更完备易于使用，后者更具灵活性。RNN层可以通过组合调用RNNCell来实现。


1. RNN

import torch as t
from torch import nn
from torch.autograd import Variable as V

t.manual_seed(1000)

# 输入 batch_size=3,序列长度都为2，序列中每个元素占4维

input=V(t.randn(2,3,4))
print(input)

# lstm 输入向量4维，3个隐藏元，1层

lstm=nn.LSTM(4,3,1)

# 初始状态：1层，batch_size=3,3个隐层元

h0=V(t.randn(1,3,3))
c0=V(t.randn(1,3,3))

# error 多传一个参数，应该是2-3个，而不是4个，默认有self
# out,(hn,cn)=lstm(input,h0,c0)
out,(hn,cn)=lstm(input,(h0,c0))
print(out)
print("hn=\n",hn)
print("cn=\n",cn)

out,hn=lstm(input,(h0,c0))
print(out)
print("hn=\n",hn)




/home/wangbin/anaconda3/envs/deep_learning/bin/python3.7 /home/wangbin/anaconda3/envs/deep_learning/project/main.py
tensor([[[-0.5306, -1.1300, -0.6734, -0.7669],
         [-0.7029,  0.9896, -0.4482,  0.8927],
         [-0.6043,  1.0726,  1.0481,  1.0527]],

        [[-0.6424, -1.2234, -1.0794, -0.6037],
         [-0.7926, -0.1414, -1.0225, -0.0482],
         [ 0.6610, -0.8908,  1.4793, -0.3934]]])
tensor([[[-0.3610, -0.1643,  0.1631],
         [-0.0613, -0.4937, -0.1642],
         [ 0.5080, -0.4175,  0.2502]],

        [[-0.0703, -0.0393, -0.0429],
         [ 0.2085, -0.3005, -0.2686],
         [ 0.1482, -0.4728,  0.1425]]], grad_fn=<StackBackward>)
hn=
 tensor([[[-0.0703, -0.0393, -0.0429],
         [ 0.2085, -0.3005, -0.2686],
         [ 0.1482, -0.4728,  0.1425]]], grad_fn=<StackBackward>)
cn=
 tensor([[[-0.1092, -0.0645, -0.0755],
         [ 0.3125, -0.6556, -0.4899],
         [ 0.3707, -0.8322,  1.0514]]], grad_fn=<StackBackward>)
tensor([[[-0.3610, -0.1643,  0.1631],
         [-0.0613, -0.4937, -0.1642],
         [ 0.5080, -0.4175,  0.2502]],

        [[-0.0703, -0.0393, -0.0429],
         [ 0.2085, -0.3005, -0.2686],
         [ 0.1482, -0.4728,  0.1425]]], grad_fn=<StackBackward>)
hn=
 (tensor([[[-0.0703, -0.0393, -0.0429],
         [ 0.2085, -0.3005, -0.2686],
         [ 0.1482, -0.4728,  0.1425]]], grad_fn=<StackBackward>), tensor([[[-0.1092, -0.0645, -0.0755],
         [ 0.3125, -0.6556, -0.4899],
         [ 0.3707, -0.8322,  1.0514]]], grad_fn=<StackBackward>))

Process finished with exit code 0



2. RNNCell层



