1. 索引操作

from __future__ import print_function
import torch as t


a=t.randn(3,4)
print(a)

print(a[0])

print(a[:,0])

print(a[0,2],a[0][2])

print(a[0,-1])

print(a[:2])

print(a[:2,0:2])

print(a[0:1,:2])

print(a>1)

print(a[a>1])

print(a[t.LongTensor([0,1])])


/home/wangbin/anaconda3/envs/deep_learning/bin/python3.7 /home/wangbin/anaconda3/envs/deep_learning/project/main.py
tensor([[-1.3064, -0.2211, -0.4969, -0.1387],
        [-0.7596, -0.7879,  0.2892,  0.6637],
        [ 0.0192,  0.5766,  0.0806, -0.3101]])
tensor([-1.3064, -0.2211, -0.4969, -0.1387])
tensor([-1.3064, -0.7596,  0.0192])
tensor(-0.4969) tensor(-0.4969)
tensor(-0.1387)
tensor([[-1.3064, -0.2211, -0.4969, -0.1387],
        [-0.7596, -0.7879,  0.2892,  0.6637]])
tensor([[-1.3064, -0.2211],
        [-0.7596, -0.7879]])
tensor([[-1.3064, -0.2211]])
tensor([[False, False, False, False],
        [False, False, False, False],
        [False, False, False, False]])
tensor([])
tensor([[-1.3064, -0.2211, -0.4969, -0.1387],
        [-0.7596, -0.7879,  0.2892,  0.6637]])

Process finished with exit code 0




2. （索引）一些选择函数

import torch as t

a=t.arange(16,32).view(4,4)
print(a)

index=t.LongTensor([[0,1,2,3]])
print(index)

print(a.gather(0,index))

index=t.LongTensor([[3,2,1,0]]).t()
print(a.gather(1,index))

index=t.LongTensor(([[3,2,1,0]]))
print(a.gather(0,index))

index=t.LongTensor([[0,1,2,3],[3,2,1,0]]).t()
b=a.gather(1,index)
print(b)

print(b.dtype)
b=b.float()
print(b.dtype)
c=t.zeros(4,4)
print(c,"\n",c.dtype)
# print(c.dtype)
c.scatter_(1,index,b)
print(c)



/home/wangbin/anaconda3/envs/deep_learning/bin/python3.7 /home/wangbin/anaconda3/envs/deep_learning/project/main.py
tensor([[16, 17, 18, 19],
        [20, 21, 22, 23],
        [24, 25, 26, 27],
        [28, 29, 30, 31]])
tensor([[0, 1, 2, 3]])
tensor([[16, 21, 26, 31]])
tensor([[19],
        [22],
        [25],
        [28]])
tensor([[28, 25, 22, 19]])
tensor([[16, 19],
        [21, 22],
        [26, 25],
        [31, 28]])
torch.int64
torch.float32
tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]]) 
 torch.float32
tensor([[16.,  0.,  0., 19.],
        [ 0., 21., 22.,  0.],
        [ 0., 25., 26.,  0.],
        [28.,  0.,  0., 31.]])

Process finished with exit code 0


3. 高级索引


import torch as t
x=t.arange(0,27).view(3,3,3)
print(x,"\n",x.dtype,"\n",x.shape)

print(x[[1,2],[1,2],[2,0]])
# 等价
print(x[1,1,2],"\n",x[2,2,0])

print(x[[2,1,0],[0],[1]])
# 等价
print(x[2,0,1],x[1,0,1],x[0,0,1])

print(x[[0,2],...])
#等价
print(x[0,0:3,0:3],"\n",x[2,:,:])


/home/wangbin/anaconda3/envs/deep_learning/bin/python3.7 /home/wangbin/anaconda3/envs/deep_learning/project/main.py
tensor([[[ 0,  1,  2],
         [ 3,  4,  5],
         [ 6,  7,  8]],

        [[ 9, 10, 11],
         [12, 13, 14],
         [15, 16, 17]],

        [[18, 19, 20],
         [21, 22, 23],
         [24, 25, 26]]]) 
 torch.int64 
 torch.Size([3, 3, 3])
tensor([14, 24])
tensor(14) 
 tensor(24)
tensor([19, 10,  1])
tensor(19) tensor(10) tensor(1)
tensor([[[ 0,  1,  2],
         [ 3,  4,  5],
         [ 6,  7,  8]],

        [[18, 19, 20],
         [21, 22, 23],
         [24, 25, 26]]])
tensor([[0, 1, 2],
        [3, 4, 5],
        [6, 7, 8]]) 
 tensor([[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]])

Process finished with exit code 0




